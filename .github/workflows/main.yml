name: Deploy to AWS
on:
  push:
    branches:
      - main
    paths:
      - 'client/**'
      - 'server/**'
  workflow_dispatch:
    inputs:
      invalidationPaths:
        description: 'Paths to invalidate'
        required: false

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  aws_deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout aws-lambda-walks
      uses: actions/checkout@v3
    - name: Checkout walk-routes
      uses: actions/checkout@v3
      with:
        repository: mikeboharsik/walk-routes
        path: walk-routes
        token: ${{ secrets.WALK_ROUTES_PAT }}
    - name: Setup Node.js environment
      uses: actions/setup-node@v3.6.0
      with:
        node-version: 16.19.1
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: us-east-1
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}
    - name: Azure PowerShell Action
      uses: Azure/powershell@v1
      with:
        inlineScript: |
          $distId = "${{ vars.CLOUDFLARE_DISTRIBUTION_ID }}"
          Write-Host "Deploying to CF distribution $($distId)"
          
          Write-Host "Generating geo.json from geo.jsonc"
          Push-Location ./walk-routes
          
          if (Test-Path "./utility") {
            ./utility/Invoke-GenerateJson.ps1
          } else {
            ./Invoke-GenerateJson.ps1
          }
          
          Pop-Location
          Write-Host "Finished generating geo.json"

          Write-Host "Building client"          
          Push-Location ./client
          npm install
          npm run build
          Pop-Location
          Write-Host "Finished building client"

          Push-Location ./server
          Write-Host "Installing server packages"
          npm install
          Write-Host "Installed server packages"
          
          $invalidationPaths = "${{ github.event.inputs.invalidationPaths }}"
          if ($invalidationPaths) {
            $invalidationPaths = $invalidationPaths -Split " "
          }
          Write-Host "`$invalidationPaths = [$invalidationPaths]"

          Write-Host "Invoking upload script"

          $scriptArgs = @{
            DeployClient = $true
            DistributionId = $distId
            GeoJsonFilePath = "../walk-routes/geo.json"
          }

          if ($invalidationPaths) {
            $scriptArgs["InvalidationPaths"] = $invalidationPaths
          }

          Write-Host "Running Invoke-Upload.ps1 with args [$(ConvertTo-Json -Depth 10 $scriptArgs)]"

          .\Invoke-Upload.ps1 @scriptArgs

          Write-Host "Invoke-Upload.ps1 completed with result [$?]"
        azPSVersion: latest
