name: Deploy to AWS
on:
  push:
    branches:
      - main
    paths:
      - 'client/**'
      - 'server/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      invalidationPaths:
        description: 'Paths to invalidate'
        required: false

concurrency:
  group: aws-lambda-walks
  cancel-in-progress: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  aws_deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
    - name: Checkout aws-lambda-walks
      uses: actions/checkout@v3
      
    - name: Checkout walk-routes
      uses: actions/checkout@v3
      with:
        repository: mikeboharsik/walk-routes
        path: walk-routes
        token: ${{ secrets.WALK_ROUTES_PAT }}

    - name: Get repo hashes
      id: get-sha
      shell: pwsh
      run: |
        $lambdaSha = curl -u "u:${{ github.token }}" https://api.github.com/repos/mikeboharsik/aws-lambda-walks/git/ref/heads/main
          | ConvertFrom-Json -Depth 5 -AsHashtable
          | Select-Object -ExpandProperty object
          | Select-Object -ExpandProperty sha
        $routesSha = curl -u "u:${{ secrets.WALK_ROUTES_PAT }}" https://api.github.com/repos/mikeboharsik/walk-routes/git/ref/heads/main
          | ConvertFrom-Json -Depth 5 -AsHashtable
          | Select-Object -ExpandProperty object
          | Select-Object -ExpandProperty sha

        Write-Host "`$lambdaSha = [$lambdaSha]"
        Write-Host "`$routesSha = [$routesSha]"

        "lambda-sha=$lambdaSha" >> $ENV:GITHUB_OUTPUT
        "routes-sha=$routesSha" >> $ENV:GITHUB_OUTPUT

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: latest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: us-east-1
        role-to-assume: ${{ vars.AWS_ROLE_ARN }}

    - name: Generate walk data
      run: |
        pushd ./walk-routes
        node -e "const g = require('./utility/WalkDataGenerator'); new g().generateAll();"
        popd

    - name: Invoke PowerShell scripts
      shell: pwsh
      run: |
        $distId = "${{ vars.CLOUDFLARE_DISTRIBUTION_ID }}"
        Write-Host "Deploying to CF distribution $($distId)`n"

        Write-Host "Building client"          
        Push-Location ./client
        npm install
        npm run build
        Pop-Location
        Write-Host "Finished building client`n"

        Push-Location ./server
        Write-Host "Installing server packages"
        npm install
        Write-Host "Installed server packages`n"

        Write-Host (Get-Location)
        $gitData = [ordered]@{
          'aws-lambda-walks' = "${{ steps.get-sha.outputs.lambda-sha }}"
          'walk-routes' = "${{ steps.get-sha.outputs.routes-sha }}"
        }
        New-Item -Type Directory "./build" | Out-Null
        $gitData | ConvertTo-Json -Depth 10 -Compress | Set-Content "./build/git.json"

        $invalidationPaths = "${{ github.event.inputs.invalidationPaths }}"
        if ($invalidationPaths) {
          $invalidationPaths = $invalidationPaths -Split " "
        }
        Write-Host "`$invalidationPaths = [$invalidationPaths]`n"

        Write-Host "Invoking upload script"

        $scriptArgs = @{
          DeployClient = $true
          DistributionId = $distId
        }

        if ($invalidationPaths) {
          $scriptArgs["InvalidationPaths"] = $invalidationPaths
        }

        Write-Host "Running Invoke-Upload.ps1 with args [$(ConvertTo-Json -Depth 10 $scriptArgs)]"

        .\Invoke-Upload.ps1 @scriptArgs

        Write-Host "Invoke-Upload.ps1 completed with result [$?]`n"

    - name: Publish build folder
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: server/build
        retention-days: 1
